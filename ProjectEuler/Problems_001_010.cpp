#include "ProjectEuler.h"

#include <iostream>

using namespace std;

#include <list>
#include <vector>

/*
Multiples of 3 and 5
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

void Problem_001_bruteforce(void)
{
	// simples, brute force solution
	const int upperBound = 1000;
	int sumOf3Or5Multiplies = 0;
	for (int i = 0; i < upperBound; ++i)
	{
		if (0 == i%3)
		{
			sumOf3Or5Multiplies += i;
		}
		else if (0 == i%5)
		{
			sumOf3Or5Multiplies += i;
		}
	}

	cout << sumOf3Or5Multiplies << endl;
}

void Problem_001(void)
{
	const int upperBound = 1000;
	int sumOf3Or5Multiplies = 0;

	for (int i = 3; i < upperBound; i = i + 3)
	{
		sumOf3Or5Multiplies += i;
	}
	for (int i = 5; i < upperBound; i = i + 5)
	{
		sumOf3Or5Multiplies += i;
	}
	for (int i = 15; i < upperBound; i = i + 15)
	{
		sumOf3Or5Multiplies -= i;
	}

	cout << sumOf3Or5Multiplies << endl;
}

/*
Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be :

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even - valued terms.
*/

void Problem_002(void)
{
	int previousElement = 1;
	int currentElement = 2;

	int sumOfFibonacciEvenValuedTerms = previousElement;

	while (currentElement < 4000000)
	{
		int temp = currentElement;
		currentElement = currentElement + previousElement;
		previousElement = temp;

		if (1 == currentElement % 2)
		{
			sumOfFibonacciEvenValuedTerms += currentElement;
		}
	}

	cout << sumOfFibonacciEvenValuedTerms << endl;
}

/*
Largest prime factor
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

static long findNextPrimeNumber(long currentPrimeNumber)
{
	long newPrimeNumber = currentPrimeNumber;

	bool flagNewPrimeNumberFound = false;

	while (!flagNewPrimeNumberFound)
	{
		newPrimeNumber++;
		flagNewPrimeNumberFound = true;

		long upperLimit = newPrimeNumber / 2;
		if (newPrimeNumber < 4)
		{
			upperLimit = newPrimeNumber;
		}
		for (int i = 2; i < newPrimeNumber/2; ++i)
		{
			if (newPrimeNumber % i == 0)
			{
				flagNewPrimeNumberFound = false;
				break;
			}
		}
	}

	return newPrimeNumber;
}

void Problem_003(void)
{
	long long valueToCheck = 600851475143; // 13195;

	long long currentPrimeNumber = 2;

	list<long long> listOfPrimeFactors;

	// testing findNextPrimeNumber function 
	/*
	int primeNumber = 1;
	for (int i = 0; i < 50; ++i)
	{
		primeNumber = findNextPrimeNumber(primeNumber);
		cout << primeNumber << endl;
	}
	*/

	while (currentPrimeNumber <= valueToCheck)
	{
		if (0 == (valueToCheck % currentPrimeNumber))
		{
			listOfPrimeFactors.push_front(currentPrimeNumber);
			valueToCheck = valueToCheck / currentPrimeNumber;
			cout << listOfPrimeFactors.front() << endl;
		}
		currentPrimeNumber = findNextPrimeNumber(currentPrimeNumber);	
	}
}

/*
Largest palindrome product
Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/

void Problem_004(void)
{
	char valueAsString[7];
	// bruteforce powa!
	for (int i = 999; i > 99; --i)
	{
		bool flagIsPalindrom = false;

		for (int j = 999; j > 99; --j)
		{
			int product = i*j;
			itoa(product, valueAsString, 10);
			int length = strlen(valueAsString);
			flagIsPalindrom = true;
			for (int k = 0; k < length / 2; ++k)
			{
				if (valueAsString[k] != valueAsString[length - (k+1)])
				{
					flagIsPalindrom = false;
					break;
				}
			}

			if (flagIsPalindrom)
			{
				cout << i << ", " << j << endl;
				break;
			}
		}
		if (flagIsPalindrom)
		{
			break;
		}
	}
}

/*
Smallest multiple
Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/

void Problem_005(void)
{
	// this time no brute force methods allowed!
	list<int> multipliers;
	multipliers.push_front(2);

	for (int i = 3; i < 21; ++i)
	{
		int currentValue = i;
		int valueToAdd = i;
		for (auto iter = multipliers.begin(); iter != multipliers.end(); ++iter)
		{
			if ((0 == (currentValue % *iter)))
			{
				currentValue = currentValue / (*iter);
				valueToAdd = currentValue;
			}
		}
		if (1 != valueToAdd)
		{
			multipliers.push_back(valueToAdd);
		}
	}

	int smallestMultiple = 1;
	for (auto item : multipliers)
	{
		smallestMultiple *= item;
	}

	cout << smallestMultiple << endl;
}

/*
Sum square difference
Problem 6
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)^2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/

void Problem_006(void)
{
	const int upperBound = 20;

	int sumOfTheSquares = 0;
	int squareOfTheSum = 0;
	
	for (int i = 1; i <= upperBound; ++i)
	{
		sumOfTheSquares += i*i;
		squareOfTheSum += i;
	}
	squareOfTheSum = pow(squareOfTheSum, 2);

	cout << (sumOfTheSquares - squareOfTheSum) << endl;

}

/*
10001st prime
Problem 7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
*/

void Problem_007(void)
{
	const int n = 10001;
	int nthPrimeNumber = 2;

	for (int i = 0; i < n; ++i)
	{
		nthPrimeNumber = findNextPrimeNumber(nthPrimeNumber);
	}
	cout << nthPrimeNumber << endl;
}

/*
Largest product in a series
Problem 8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

int calculateProduct(const std::vector<int>& vec)
{
	int product = 1;
	for (auto item : vec)
	{
		product *= item;
	}
	return product;
}

void Problem_008(void)
{
	const int numberOfAdjacentDigits = 13;

	std::string numberAsString = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

	std::vector<int> numbers;
	for (auto item : numberAsString)
	{
		int currentDigit = (int)(item - '0');
		if (currentDigit < 0 || currentDigit >9)
		{
			cout << "error" << endl;
		}
		numbers.push_back(currentDigit);
	}

	std::vector<int> bestSet(numbers.begin(), numbers.begin() + numberOfAdjacentDigits);
	int largestProduct = calculateProduct(bestSet);
	cout << largestProduct << endl;

	for (auto itr = numbers.begin() + numberOfAdjacentDigits; itr != numbers.end(); ++itr)
	{
		std::vector<int> currentSet(itr - numberOfAdjacentDigits, itr);
		int currentProduct = calculateProduct(currentSet);

		if (largestProduct < currentProduct)
		{
			largestProduct = currentProduct;
			bestSet = currentSet;
		}
	}

	for (auto item : bestSet)
	{
		cout << item << ", ";
	}
	cout << endl;
}